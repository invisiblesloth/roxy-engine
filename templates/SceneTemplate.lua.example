-- 
-- SceneTemplate.lua
-- 
-- Use this template as a guide for creating scenes in your game.
-- Copy this file to your "scenes" directory and rename it.
-- 

-- 
-- To improve performance, it's recommended to create local constants for any 
-- manager singletons you need. Below are all available singletons. 
-- Remove the ones you don't need.
-- 

-- Singleton instances for managers
local configurationManager <const> = ConfigurationManager.getInstance()
local settingsManager <const> = SettingsManager.getInstance()
local gameDataManager <const> = GameDataManager.getInstance()
local sequenceManager <const> = SequenceManager.getInstance()
local sceneManager <const> = SceneManager.getInstance()
local inputManager <const> = InputManager.getInstance()
local transitionManager <const> = TransitionManager.getInstance()

--
-- To optimize performance and improve code readability, create local aliases 
-- for frequently used modules and classes. These aliases reduce the need to 
-- repeatedly access the global namespace, which can be slower.
--
-- The following are suggested aliases for common Playdate SDK and 
-- Roxy Game Engine modules. Adjust or remove the aliases based on your 
-- specific needs.
--

-- Aliases for performance
local pd <const> = playdate
local Object <const> = pd.object
local InputHandlers <const> = pd.inputHandlers
local Display <const> = pd.display
local Graphics <const> = pd.graphics
local Font <const> = Graphics.font
local Text <const> = roxy.text
local Sprite <const> = Graphics.sprite
local Timer <const> = pd.timer
local FrameTimer <const> = pd.frameTimer
-- local Ease <const> = pd.easingFunctions
local Ease <const> = roxy.easingFunctions
local Geometry <const> = pd.geometry
local Math <const> = roxy.math
local UI <const> = pd.ui
local Gridview <const> = UI.gridview
local File <const> = pd.file
local Datastore <const> = pd.datastore
local Table <const> = roxy.table

-- 
-- To reference the display's width, height, or center coordinates,
-- use `roxy.graphics.getDisplaySize()`. This function returns these 
-- properties, allowing you to easily access and use them in your scene.
-- 

local displayWidth, displayHeight, displayCenterX, displayCenterY = roxy.graphics.getDisplaySize()

-- 
-- Rename "SceneTemplate" to match your scene's name. This name will be used 
-- throughout the scene's implementation.
--

class("SceneTemplate").extends(RoxyScene)
local scene = SceneTemplate

--
-- Customize these default properties as needed. Objects defined here are 
-- created when the file is imported in main.lua, which can help smooth 
-- transitions by reducing the load during scene initialization. However, be 
-- mindful that this increases memory usage even when the scene is not in use.
--

-- Default properties
local defaultProperties = {
	backgroundImage = Graphics.image.new("assets/images/background")
	
	-- 
	-- Add your properties *HERE* for eager initialization. 
	-- Alternatively, you can define them in the `init()` method if you prefer 
	-- delayed initialization.
	-- 

}

-- ! Initialize Scene
-- 
-- @param `background` (optional): An image or a color to be used as 
--   the background.
-- @param `properties` (optional): A table of properties that can override 
--   `defaultProperties`. This table doesn't need to match `defaultProperties` 
--   exactly; any overlapping properties will override the defaults.
-- 
function scene:init(background, properties)
	properties = properties or {}
	
	-- 
	-- Merge the provided properties with the default properties, 
	-- ensuring all necessary settings are included.
	-- Note: You are not required to pass `background` or `properties` 
	-- when initializing your scene.
	--
	local mergedProperties = roxy.table.mergeImmutable(defaultProperties, properties)
	
	-- 
	-- Assign the merged properties to the scene's attributes. 
	-- This is where you set up the scene’s attributes using both the 
	-- default and provided properties.
	--
	self.backgroundImage = mergedProperties.backgroundImage
	
	-- 
	-- Define additional properties using this format: 
	-- `self.yourProperty = mergedProperties.yourProperty`
	-- 
	
	-- 
	-- You can also define extra properties for the scene as needed.
	--
	self.color1 = Graphics.kColorBlack
	self.color2 = Graphics.kColorWhite
	
	-- 
	-- Define additional properties *HERE*
	-- 
	
	-- 
	-- If your scene uses a background image, pass it to the parent class for 
	-- further setup. There’s no need to pass any additional properties 
	-- to the parent class.
	--
	scene.super.init(self, self.backgroundImage)
	
	-- 
	-- Your code *HERE*
	-- 
	
	--
	-- The input handler is set up to respond to various button presses, holds, 
	-- and crank movements. Each input option is provided here as a template. 
	-- Customize the actions by replacing the print statements with your 
	-- scene's logic.
	-- 
	-- For each button, the following events are available:
	-- * `ButtonPressed`: Triggered when the button is pressed.
	-- * `ButtonHeld`: Triggered after holding the button down for one second.
	-- * `ButtonPressedContinuously`: Triggered repeatedly while the button 
	--     is held.
	-- * `ButtonReleased`: Triggered when the button is released.
	-- * `ButtonCustomHeld`: Triggered after holding the button for a custom 
	--     duration (configurable in config.json; default is 20 frames).
	--
	-- For the crank, the following events are available:
	-- * `crankUndocked`: Triggered when the crank is undocked.
	-- * `crankDocked`: Triggered when the crank is docked.
	-- * `cranked`: Triggered when the crank is turned, with `change` 
	--     indicating the amount of rotation and `acceleratedChange` indicating 
	--     any acceleration. The `adjustedChange` parameter is set in 
	--     config.json and controls the direction that increases crank ticks 
	--     (default is clockwise (CW) for increasing ticks).
	-- 
	-- If you don't need certain input events, remove them to streamline your 
	-- scene's code.
	--
	
	-- Initialize crank-related variables
	self.crankTick = 0
	self.crankCounter = 0
	
	-- 
	-- self.inputHandler = someOtherInputHandler
	-- OR
	-- Set up input handler
	self.inputHandler = {
		-- A Button
		AButtonPressed = function()
			print(self.name .. ": A button pressed")
		end,
		AButtonHeld = function()
			print(self.name .. ": A button held")
		end,
		AButtonPressedContinuously = function()
			print(self.name .. ": A button pressed continuously")
		end,
		AButtonReleased = function()
			print(self.name .. ": A button released")
		end,
		AButtonCustomHeld = function()  -- Threshold set in config.json (`customHoldThreshold`; default: 20 frames)
			print(self.name .. ": A button custom held")
		end,
		
		-- B Button
		BButtonPressed = function()
			print(self.name .. ": B button pressed")
		end,
		BButtonHeld = function()
			print(self.name .. ": B button held")
		end,
		BButtonPressedContinuously = function()
			print(self.name .. ": B button pressed continuously")
		end,
		BButtonReleased = function()
			print(self.name .. ": B button released")
		end,
		BButtonCustomHeld = function()
			print(self.name .. ": B button custom held")
		end,
		
		-- D-Pad Up
		upButtonPressed = function()
			print(self.name .. ": Up button pressed")
		end,
		upButtonPressedContinuously = function()
			print(self.name .. ": Up button pressed continuously")
		end,
		upButtonReleased = function()
			print(self.name .. ": Up button released")
		end,
		upButtonCustomHeld = function()
			print(self.name .. ": Up button custom held")
		end,
		
		-- D-Pad Down
		downButtonPressed = function()
			print(self.name .. ": Down button pressed")
		end,
		downButtonPressedContinuously = function()
			print(self.name .. ": Down button pressed continuously")
		end,
		downButtonReleased = function()
			print(self.name .. ": Down button released")
		end,
		downButtonCustomHeld = function()
			print(self.name .. ": Down button custom held")
		end,
		
		-- D-Pad Left
		leftButtonPressed = function()
			print(self.name .. ": Left button pressed")
		end,
		leftButtonPressedContinuously = function()
			print(self.name .. ": Left button pressed continuously")
		end,
		leftButtonReleased = function()
			print(self.name .. ": Left button released")
		end,
		leftButtonCustomHeld = function()
			print(self.name .. ": Left button custom held")
		end,
		
		-- D-Pad Right
		rightButtonPressed = function()
			print(self.name .. ": Right button pressed")
		end,
		rightButtonPressedContinuously = function()
			print(self.name .. ": Right button pressed continuously")
		end,
		rightButtonReleased = function()
			print(self.name .. ": Right button released")
		end,
		rightButtonCustomHeld = function()
			print(self.name .. ": Right button custom held")
		end,
		
		--
		-- The crank's default behavior in Roxy is set so that when you rotate 
		-- the crank clockwise (CW) from your perspective, while holding the 
		-- Playdate with the top (lock button) facing away and the screen to 
		-- your left, the crank tick increases.
		-- 
		-- `self.crankTick` keeps track of the cumulative rotation, resetting 
		-- after a full increment. `self.crankCounter` counts how many full 
		-- increments have occurred.
		--
		
		-- Crank
		crankUndocked = function()
			print(self.name .. ": Crank just undocked")
		end,
		crankDocked = function()
			print(self.name .. ": Crank just docked")
		end,
		cranked = function(change, acceleratedChange)
			-- Adjust crank change based on direction set in config.json 
			-- (`crankDirection`; default: 1, which is CW + CCW -)
			local adjustedChange = change * inputManager.crankDirection
			self.crankTick = (self.crankTick or 0) + adjustedChange
			
			if self.crankTick > 30 then
				self.crankTick = 0
				self.crankCounter = (self.crankCounter or 0) + 1
			elseif self.crankTick < -30 then
				self.crankTick = 0
				self.crankCounter = (self.crankCounter or 0) - 1
			end
		end
	}
end

-- 
-- Scene Lifecycle
-- 
-- The following functions are part of the scene lifecycle. Customize them as 
-- needed to control the behavior of your scene during transitions, updates, 
-- and more.
--

-- 
-- `enter()` is called when transitioning to your scene. It runs as soon as the 
-- scene becomes visible.
--

-- ! Enter Scene
function scene:enter()
	scene.super.enter(self)
	
	-- 
	-- Your code *HERE*
	-- 
	
end

-- 
-- `start()` is called once the transition to your scene is complete.
--

-- ! Start Scene
function scene:start()
	scene.super.start(self)
	
	-- 
	-- Your code *HERE*
	-- 
	
end

-- 
-- `pause()` can be called when you need to pause your scene. For example, it 
-- is triggered by `Roxy:gameWillPause()`.
--

function RoxyScene:pause()
	scene.super.pause(self)
	
	-- 
	-- Your code *HERE*
	-- 
	
end

-- 
-- `resume()` is called to resume your scene after being paused. This is set up 
-- to be triggered by `Roxy:gameWillResume()`.
--

function RoxyScene:resume()
	scene.super.resume(self)
	
	-- 
	-- Your code *HERE*
	-- 
end

-- 
-- `exit()` runs as soon as a transition away from your scene begins.
--

-- ! Exit Scene
function scene:exit()
	scene.super.exit(self)
	
	-- 
	-- Your code *HERE*
	-- 
	
end

-- 
-- `cleanup()` is called after a transition away from your scene is complete.
-- Use this function to clean up resources or reset variables to prevent 
-- memory leaks or unintended behavior in future scenes.
--

-- ! Clean Up Scene
function scene:cleanup()
	scene.super.cleanup(self)
	
	-- 
	-- Your code *HERE*
	-- 
	-- Example: Release objects or reset variables to free up memory.
	-- Ex: `self.yourObject = nil`
	-- 
	
end

-- 
-- `drawBackground()` is called once per frame to draw the scene's background.
-- Use this function to customize the background rendering, if needed.
--

-- ! Draw Background
function scene:drawBackground()
	scene.super.drawBackground(self)
	
	-- 
	-- This function is a callback set by 
	-- `playdate.graphics.sprite.setBackgroundDrawingCallback(drawCallback)`.
	-- If you set a background image or color by passing it to the parent class 
	-- in the `init()` method, you do not need to add additional code here, as 
	-- the parent class handles the background drawing.
	--
	
	-- 
	-- Your code *HERE*
	-- 
	
end

-- 
-- `update()` runs once per frame to update the scene's state.
-- 

-- ! Update Scene
function scene:update()
	scene.super.update(self)
	
	-- 
	-- Your code *HERE*
	-- 
	
end
